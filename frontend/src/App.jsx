import React, { useState, useEffect, useCallback, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { initializeApp } from 'firebase/app';
import { getAuth, GoogleAuthProvider, signInWithPopup, signOut, onAuthStateChanged } from 'firebase/auth';

// --- IMPORTANT: Firebase Configuration ---

const firebaseConfig = {
  apiKey: "PASTE_YOUR_API_KEY_HERE",
  authDomain: "PASTE_YOUR_AUTH_DOMAIN_HERE",
  projectId: "PASTE_YOUR_PROJECT_ID_HERE",
  storageBucket: "PASTE_YOUR_STORAGE_BUCKET_HERE",
  messagingSenderId: "PASTE_YOUR_MESSAGING_SENDER_ID_HERE",
  appId: "PASTE_YOUR_APP_ID_HERE"
};

// --- Backend API URL ---
// This tells the frontend where to find the backend server.
// "http://localhost:3001" is the standard address for a local server.
const API_URL = 'http://localhost:3001';

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const provider = new GoogleAuthProvider();

// --- SVG Icons ---
const ShieldIcon = ({ className = "h-12 w-12 text-blue-300" }) => ( <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1.5}> <path strokeLinecap="round" strokeLinejoin="round" d="M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286zm0 13.036h.008v.008h-.008v-.008z" /> </svg> );
const UploadIcon = () => ( <svg className="w-10 h-10 mb-4 text-gray-500" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16"> <path stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" /> </svg> );
const GoogleIcon = () => ( <svg className="w-5 h-5 mr-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid" viewBox="0 0 256 262"> <path fill="#4285F4" d="M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c22.69-21.033 35.88-53.37 35.88-91.864z"></path><path fill="#34A853" d="M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.27 12.214-45.257 12.214-34.54 0-63.824-23.426-74.269-54.764l-1.732.13-40.09 31.024-2.315.198C31.386 230.658 77.225 261.1 130.55 261.1z"></path><path fill="#FBBC05" d="M56.281 156.37c-2.756-8.123-4.351-16.821-4.351-25.82 0-8.999 1.595-17.697 4.206-25.82l-2.032.189-41.336 32.06-2.953.238C1.986 150.623 0 165.223 0 180c0 14.777 1.986 29.377 5.484 42.651l44.335-34.335.034-.002z"></path><path fill="#EB4335" d="M130.55 50.479c19.231 0 36.344 6.578 50.074 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 77.225 0 31.386 30.442 5.484 73.065l46.332 35.842C61.727 76.843 86.01 50.479 130.55 50.479z"></path> </svg> );

// --- Main App & Components ---
function AnimatedBackground() { return ( <div className="absolute inset-0 -z-10 h-full w-full bg-gray-900 bg-grid-pattern"> <div className="absolute inset-0 pointer-events-none bg-radial-gradient" /> </div> ); }
export default function App() { const [page, setPage] = useState('landing'); const [user, setUser] = useState(null); useEffect(() => { const unsubscribe = onAuthStateChanged(auth, (currentUser) => { setUser(currentUser); }); return () => unsubscribe(); }, []); const handleLogin = async () => { try { await signInWithPopup(auth, provider); } catch (error) { console.error("Error signing in with Google", error); } }; const handleLogout = async () => { try { await signOut(auth); } catch (error) { console.error("Error signing out", error); } }; return ( <main className="relative min-h-screen text-white font-sans bg-gray-900 overflow-x-hidden"> <AnimatedBackground /> <Header user={user} onLogin={handleLogin} onLogout={handleLogout} /> {page === 'landing' && <LandingPage onStart={() => setPage('app')} />} {page === 'app' && <ImmunizerApp user={user} onLogin={handleLogin} />} </main> ); }
const Header = ({ user, onLogin, onLogout }) => { return ( <header className="absolute top-0 left-0 right-0 p-4 z-10"> <div className="container mx-auto flex justify-between items-center"> <div className="flex items-center gap-2"> <ShieldIcon className="h-8 w-8 text-blue-400" /> <h1 className="text-xl font-bold tracking-tighter">AI-Shield</h1> </div> {user ? ( <button onClick={onLogout} className="bg-gray-700 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition-colors"> Sign Out </button> ) : ( <button onClick={onLogin} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center"> <GoogleIcon /> Sign In with Google </button> )} </div> </header> ); };
const LandingPage = ({ onStart }) => { return ( <div className="container mx-auto px-4 flex flex-col items-center justify-center min-h-screen text-center"> <motion.h1 initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7 }} className="text-5xl md:text-7xl font-extrabold tracking-tight mb-4" > Reclaim Your Image. </motion.h1> <motion.p initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.7, delay: 0.2 }} className="max-w-3xl text-lg md:text-xl text-gray-300 mb-8" > AI-Shield armors your photos, making them unusable for training malicious deepfake AIs. Share online with confidence and control your digital identity. </motion.p> <motion.button initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }} transition={{ duration: 0.5, delay: 0.4 }} onClick={onStart} className="px-8 py-4 bg-blue-600 text-white text-lg font-bold rounded-full hover:bg-blue-700 transition-colors shadow-lg" > Armor Your First Photo </motion.button> </div> ); };
const ImmunizerApp = ({ user, onLogin }) => { const [processedImageUrl, setProcessedImageUrl] = useState(null); const [analysisResult, setAnalysisResult] = useState(null); const [status, setStatus] = useState('idle'); const [error, setError] = useState(''); const { hasFreeUses, increment } = useAnonymousUsage(); const canProcess = user || hasFreeUses; const reset = () => { setProcessedImageUrl(null); setAnalysisResult(null); setStatus('idle'); setError(''); }; const handleFileChange = async (file) => { if (!file) return; if (file.size > 10 * 1024 * 1024) { setError("File size exceeds 10MB. Please upload a smaller image."); setStatus('error'); return; } if (!['image/jpeg', 'image/png'].includes(file.type)) { setError("Invalid file type. Please upload a JPEG or PNG image."); setStatus('error'); return; } if (!canProcess) { setStatus('limit_reached'); return; } setStatus('processing'); const formData = new FormData(); formData.append('image', file); try { const response = await fetch(`${API_URL}/api/immunize`, { method: 'POST', body: formData, }); if (!response.ok) { const errData = await response.json(); throw new Error(errData.error || 'Backend processing failed.'); } const data = await response.json(); setAnalysisResult(data.analysis); setProcessedImageUrl(data.immunizedImage); setStatus('success'); if (!user) increment(); } catch (err) { setError(err.message || 'An unknown error occurred.'); setStatus('error'); } }; return ( <div className="container mx-auto px-4 pt-24 pb-12 flex flex-col items-center min-h-screen"> <div className="w-full max-w-4xl bg-gray-800/50 rounded-2xl shadow-2xl p-6 md:p-8 backdrop-blur-lg border border-gray-700"> <AnimatePresence mode="wait"> {status === 'idle' && <UploadZone key="upload" onFileChange={handleFileChange} />} {status === 'processing' && <ProcessingZone key="processing" />} {status === 'success' && <SuccessZone key="success" imageUrl={processedImageUrl} analysisResult={analysisResult} onReset={reset} />} {status === 'error' && <ErrorZone key="error" message={error} onReset={reset} />} {status === 'limit_reached' && <LimitReachedZone key="limit" onLogin={onLogin} />} </AnimatePresence> </div> </div> ); };
const UploadZone = ({ onFileChange }) => { const [isDragging, setIsDragging] = useState(false); const fileInputRef = useRef(null); const handleDrag = useCallback((e) => { e.preventDefault(); e.stopPropagation(); if (e.type === "dragenter" || e.type === "dragover") { setIsDragging(true); } else if (e.type === "dragleave") { setIsDragging(false); } }, []); const handleDrop = useCallback((e) => { e.preventDefault(); e.stopPropagation(); setIsDragging(false); if (e.dataTransfer.files && e.dataTransfer.files[0]) { onFileChange(e.dataTransfer.files[0]); } }, [onFileChange]); const handleChange = (e) => { e.preventDefault(); if (e.target.files && e.target.files[0]) { onFileChange(e.target.files[0]); } }; return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}> <div className={`flex items-center justify-center w-full on-drag-over on-drop ${isDragging ? 'border-blue-500 bg-gray-700' : 'border-gray-600 bg-gray-800'} border-2 border-dashed rounded-lg cursor-pointer transition-colors`} onDragEnter={handleDrag} onDragLeave={handleDrag} onDragOver={handleDrop} onClick={() => fileInputRef.current.click()} > <div className="flex flex-col items-center justify-center pt-5 pb-6"> <UploadIcon /> <p className="mb-2 text-sm text-gray-400"> <span className="font-semibold">Click to upload</span> or drag and drop </p> <p className="text-xs text-gray-500">PNG or JPG (MAX. 10MB)</p> </div> <input ref={fileInputRef} type="file" className="hidden" accept="image/png, image/jpeg" onChange={handleChange} /> </div> </motion.div> ); };
const ProcessingZone = () => { return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="flex flex-col items-center justify-center p-12"> <motion.div animate={{ rotate: 360 }} transition={{ repeat: Infinity, duration: 1, ease: "linear" }} className="w-16 h-16 border-4 border-t-blue-500 border-gray-600 rounded-full" /> <p className="mt-4 text-lg font-semibold text-gray-300">Armoring your image...</p> <p className="text-sm text-gray-400">This may take a moment.</p> </motion.div> ); };
const SuccessZone = ({ imageUrl, analysisResult, onReset }) => { const riskColor = { "Low": "bg-green-500", "Medium": "bg-yellow-500", "High": "bg-red-500", "Unknown": "bg-gray-500" }; if (!analysisResult) { return ( <div className="text-center p-8"> <p>Loading analysis report...</p> </div> ) } return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}> <div className="text-center mb-6"> <h2 className="text-3xl font-bold text-green-400">Armor Applied!</h2> <p className="text-gray-300 mt-1">Your image is now protected. Here's your AI security report:</p> </div> <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start"> <div className="flex flex-col items-center"> <motion.div initial={{ scale: 0.8, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} transition={{ delay: 0.2 }} className="relative w-full max-w-sm mx-auto rounded-lg overflow-hidden shadow-lg border border-green-500/50" > <img src={imageUrl} alt="Processed" className="w-full h-auto" /> <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-60 opacity-0 hover:opacity-100 transition-opacity duration-300"> <ShieldIcon className="h-16 w-16 text-green-400" /> </div> </motion.div> <a href={imageUrl} download="armored-image.png" className="w-full max-w-sm mt-4 text-center px-6 py-3 bg-green-600 text-white font-bold rounded-lg hover:bg-green-700 transition-colors shadow-lg"> Download Protected Image </a> </div> <motion.div initial={{ x: 20, opacity: 0 }} animate={{ x: 0, opacity: 1 }} transition={{ delay: 0.4 }} className="bg-gray-900/70 p-6 rounded-lg border border-gray-700 space-y-5" > <h3 className="text-xl font-semibold border-b border-gray-600 pb-2">Security Report</h3> <div> <h4 className="font-semibold text-gray-300">Image Summary</h4> <p className="text-sm text-gray-400">{analysisResult.description}</p> </div> <div> <h4 className="font-semibold text-gray-300">Deepfake Risk Assessment</h4> <div className="flex items-center gap-3 mt-1"> <div className={`w-24 h-6 rounded-md ${riskColor[analysisResult.deepfakeRisk]}`}></div> <span className="font-bold text-lg">{analysisResult.deepfakeRisk}</span> </div> <p className="text-xs text-gray-500 mt-1">Based on image clarity and facial positioning.</p> </div> {analysisResult.piiWarning && ( <div> <h4 className="font-semibold text-yellow-400">Privacy Warning</h4> <p className="text-sm text-yellow-200 bg-yellow-900/50 p-3 rounded-md mt-1 border border-yellow-500/50"> {analysisResult.piiWarning} </p> </div> )} <button onClick={onReset} className="w-full mt-4 px-6 py-2 bg-gray-600 text-white font-bold rounded-lg hover:bg-gray-700 transition-colors"> Armor Another Image </button> </motion.div> </div> </motion.div> ); };
const useAnonymousUsage = () => { const [count, setCount] = useState(() => { try { return parseInt(localStorage.getItem('anonymousUsageCount') || '0', 10); } catch (e) { return 0; } }); const maxFreeUses = 3; const hasFreeUses = count < maxFreeUses; const increment = () => { const newCount = count + 1; setCount(newCount); try { localStorage.setItem('anonymousUsageCount', newCount.toString()); } catch(e) { console.error("Could not write to local storage"); } }; return { count, hasFreeUses, increment }; };
const ErrorZone = ({ message, onReset }) => { return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="text-center p-8"> <h2 className="text-2xl font-bold text-red-500 mb-2">An Error Occurred</h2> <p className="text-gray-300 bg-red-900/50 p-3 rounded-md mb-6">{message}</p> <button onClick={onReset} className="px-6 py-2 bg-gray-600 text-white font-bold rounded-lg hover:bg-gray-700 transition-colors"> Try Again </button> </motion.div> ); };
const LimitReachedZone = ({ onLogin }) => { return ( <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className="text-center p-8"> <h2 className="text-2xl font-bold text-yellow-400 mb-2">Free Uses Exceeded</h2> <p className="text-gray-300 mb-6"> You've used your 3 free image immunizations. Please sign in with Google for unlimited protection. </p> <button onClick={onLogin} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors flex items-center mx-auto"> <GoogleIcon /> Sign In with Google </button> </motion.div> ); };

